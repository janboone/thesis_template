#+TITLE: Thesis title
#+author: Adam Smith
#+options: toc:nil



#+begin_abstract
This document shows you the syntax to type your thesis in latex or org-mode. It illustrates how to make footnotes, tables, equations and references to tables, equations etc.

If you want to work with latex only, look at the =.tex= file of this document. If you want to use emacs org-mode, then use the =.org= file. The pdf shows what the file looks like if you export it.

Running python code in this file only works in emacs org-mode; not in latex.
#+end_abstract


#+LATEX: \vspace{10mm}

*SNR:* 12345

*ANR:* 98765

#+LATEX: \vspace{10mm}
*Supervisor:* Alfred Marshall

*Second reader:* Karl Marx



#+LATEX: \newpage



#+TOC: headlines 2

#+LATEX: \newpage

* Introduction
\label{sec:intro}

Instruction:
- once you installed emacs
- and cloned this repository: =git clone https://github.com/janboone/thesis_template.git=
- navigate in your terminal/shell to the folder "thesis_template"
- in the shell type: =emacs -q -l init.el=
- then emacs installs and starts up with the relevant packages


This file shows you how to use [[https://www.gnu.org/software/emacs/][emacs]] [[https://orgmode.org/][org mode]] to write a thesis; shows you how to cite references, make footnotes, equations etc.

Alternatively, you can use latex directly in which case you can consider the file in this repository that ends in =_latex.tex=.

In order to use emacs, you need to install it. In Appendix ref:sec:install we explain how emacs can be installed.


* Literature references

There are a number of ways in which you can do literature citations in org-mode. We will work with org-ref:
- https://github.com/jkitchin/org-ref

The syntax for including references is as follows. See [[citet:&armstrong-2007-chapt-coord]] for an analysis. We can also have references between brackets [[citep:&athey-2019-machin-learn]]: that is, =citep= instead of =citet=. =armstrong-2007-chapt-coord= is the bibtex key, as you can see in the file =references.bib=.

An entry in a bib-tex file looks as follows:

#+begin_example

@Article{prager-2021-employ-consol-wages,
  author          = {Prager, Elena and Schmitt, Matt},
  title           = {Employer Consolidation and Wages: Evidence From Hospitals},
  journal         = {American Economic Review},
  volume          = 111,
  number          = 2,
  pages           = {397-427},
  year            = 2021,
  doi             = {10.1257/aer.20190690},
  url             = {http://dx.doi.org/10.1257/aer.20190690},
  issn            = {0002-8282},
  month           = {Feb},
  publisher       = {American Economic Association},
}
#+end_example

To cite this paper, we type [[citet:&prager-2021-employ-consol-wages]].

If you use the =init.el= file for emacs, you can use the keys: C-c ] (press control (Ctrl) and c together; release these keys and then press the ]-key). The bottom part of the screen then gives you possible papers to cite from your =references.bib= file.


* References to sections, equations, tables etc.

As we explained in Section ref:sec:intro. The previous sentence shows the syntax for a reference to a section, equation, table, figure etc. Type =ref:= and then the name of the label you are refering to. This can also be done with key strokes: C-c )

A label is typed in latex format as: =\label{name_of_label}=. For org-mode you need to add =#+name: name_of_label= to tables and figures.

Here we have some in-line math: $x^2$.[fn::\label{fn:footnote} This is a footnote.]

As you can see in footnote ref:fn:footnote; you can also refer to footnotes.


\begin{equation}
\label{eq:1}
a^2 + b^2 = c^2
\end{equation}

As we show in equation eqref:eq:1.

See Table ref:table1.

#+name: table1
#+caption: \label{table1} This table shows unemployment and gdp per head.
| country | unemployment |   gdp |
|---------+--------------+-------|
| NL      |         0.06 | 20000 |
| UK      |         0.01 | 19500 |
| BE      |         0.08 | 21100 |
|---------+--------------+-------|
| average |         0.05 | 20200 |
#+TBLFM: @5$2=vmean(@2$2..@4$2)::@5$3=vmean(@2$3..@4$3)

Creating tables in org mode is a lot easier than in latex. Just type "|" name of column, another "|" name of second column, etc. end the line with "|", then press TAB.

If you want a horizontal line, type "|----" and press TAB.

In org mode (not in latex) you can add spreadsheet type calculations. See https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html if you want to know more about this.

In latex this table looks as follows:

#+begin_example

\begin{table}[htbp]
\caption{\label{table1} This table shows unemployment and gdp per head.}
\centering
\begin{tabular}{lrr}
country & unemployment & gdp\\
\hline
NL & 0.06 & 20000\\
UK & 0.01 & 19500\\
BE & 0.08 & 21100\\
\hline
average & 0.05 & 20200\\
\end{tabular}
\end{table}

#+end_example

The following figure we will generate with python code in the appendix using the data in Table ref:table1.

#+name: figure1
#+caption: \label{figure1} Figure with unemployment and gdp
 [[./fig.png]]

See Figure ref:figure1 is the way you can refer to a figure.

* What should your editor be able to do?
 

** Basics
   
- type text...
  - consider whether you want to use model editing
- work on different parts of the same file in a split window
- help with syntax, e.g. by providing snippets for equations, environments etc.
  - e.g. with org cdlatex mode: type "equ" and then TAB to get an equation environment
  - ` a to get $\alpha$
- operate on regions: e.g. for search and replace
- operate on columns:
  - delete columns in text
  - copy and past columns
  - add text in a column
- add references to equations, sections, tables, figures
- cite literature from a bibliography file
- make it easy to add tables and edit tables (e.g. switch rows)
- export to pdf


*** simple column operations

    123456789
    123456789
    123456789
    123456789
    123456789
    123456789
    123456789
    123456789


** Advanced

- combine code and latex
- spreadsheet type capabilities
- export to other formats, e.g. html


*** more realistic column operations

Turn the table here: http://fmwww.bc.edu/ec-p/data/oecd/oecd.ctylist.html into a python dictionary:
 - C-v and block the start of each line
 - I and type '; then press ESC
 - block at the end of the abbreviation with C-v
 - type I and ' : '; then press ESC
 - block spaces (tab) to delete
 - block all lines with C-v
 - type $ A ',; then press ESC
 - delete superfluous , at the end
 - add {} to turn this into a dictionary
 - a video on how to do this with regular emacs keybindings, can be found here: https://www.youtube.com/watch?v=pcA5NeEudgU

 #+begin_src python :results output
     dict = {
     'AUS' : 'Australia',
     'AUT' : 'Austria',
     'BEL' : 'Belgium',
     'CAN' : 'Canada',
     'CHE' : 'Switzerland',
     'DEU' : 'Germany',
     'DNK' : 'Denmark',
     'ESP' : 'Spain',
     'FIN' : 'Finland',
     'FRA' : 'France',
     'GBR' : 'Great Britain',
     'GRC' : 'Greece',
     'IRE' : 'Ireland',
     'ISL' : 'Iceland',
     'ITA' : 'Italy',
     'JPN' : 'Japan',
     'KOR' : 'South Korea',
     'LUX' : 'Luxemburg',
     'MEX' : 'Mexico',
     'NLD' : 'Netherlands',
     'NOR' : 'Norway',
     'NZL' : 'New Zealand',
     'PRT' : 'Portugal',
     'SWE' : 'Sweden',
     'TUR' : 'Turkey',
     'USA' : 'United States'}
     print(dict['NLD'])
 #+end_src

 #+RESULTS:
 : Netherlands

 Another trick we can use in org mode is to paste the table directly from the website:

 AUS 	Australia
 AUT 	Austria
 BEL 	Belgium
 CAN 	Canada
 CHE 	Switzerland
 DEU 	Germany
 DNK 	Denmark
 ESP 	Spain
 FIN 	Finland
 FRA 	France
 GBR 	Great Britain
 GRC 	Greece
 IRE 	Ireland
 ISL 	Iceland
 ITA 	Italy
 JPN 	Japan
 KOR 	South Korea
 LUX 	Luxemburg
 MEX 	Mexico
 NLD 	Netherlands
 NOR 	Norway
 NZL 	New Zealand
 PRT 	Portugal
 SWE 	Sweden
 TUR 	Turkey
 USA 	United States

 - block the above table with Shift-V
 - M-x org-table-create-or-convert-from-region
 - and then add header with column names etc. to yield:

 | abbrev. | country name  |
 |---------+---------------|
 | AUS     | Australia     |
 | AUT     | Austria       |
 | BEL     | Belgium       |
 | CAN     | Canada        |
 | CHE     | Switzerland   |
 | DEU     | Germany       |
 | DNK     | Denmark       |
 | ESP     | Spain         |
 | FIN     | Finland       |
 | FRA     | France        |
 | GBR     | Great Britain |
 | GRC     | Greece        |
 | IRE     | Ireland       |
 | ISL     | Iceland       |
 | ITA     | Italy         |
 | JPN     | Japan         |
 | KOR     | South Korea   |
 | LUX     | Luxemburg     |
 | MEX     | Mexico        |
 | NLD     | Netherlands   |
 | NOR     | Norway        |
 | NZL     | New Zealand   |
 | PRT     | Portugal      |
 | SWE     | Sweden        |
 | TUR     | Turkey        |
 | USA     | United States |


* Conclusion

Here you can type the conclusion which is then followed by the bibliography.

* Bibliography


bibliography:./references.bib




@@latex:\newpage@@
@@latex:\appendix@@


* Things to install
\label{sec:install}

** latex

Install latex: https://www.latex-project.org/get/



** latex editors if you do not want to use emacs

- winedt: https://www.winedt.com/
- overleaf: https://www.overleaf.com/
- texmaker: https://www.xm1math.net/texmaker/
- tex studio: https://www.texstudio.org/

   
** git
  
install git: https://git-scm.com/downloads

** Emacs

   In the lecture I will illustrate what an editor can/should do using emacs.


*** Emacs on Windows

 - go to: http://mirror.team-cymru.com/gnu/emacs/windows/emacs-28/
 - download =emacs-28.1-installer.exe= to your Downloads folder:
[[http://mirror.team-cymru.com/gnu/emacs/windows/emacs-28/emacs-28.1-installer.exe]]
 - run the downloaded =exe= file

*** Emacs on Mac OS

 For Mac Os:
 - install homebrew: https://brew.sh/

 Open a terminal and type the following lines:

 #+begin_src shell
 brew tap d12frosted/emacs-plus
 brew install emacs-plus
 #+end_src

*** Emacs on Linux

 When you are using Linux, you probably know what you are doing. But just in case, the commands for your package manager can be found here: https://www.gnu.org/software/emacs/download.html


*** org-mode

When you install emacs, org-mode is installed as well (comes with emacs)


** introductions to emacs

  It is easy to get lost in emacs. Hence do not try to use everything at once. A couple of basic things, you need from the start (like opening and saving files). For the other things: move step-by-step. 

A great starting point, explaining key-bindings etc. is:
- https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/
  - and the video that goes with it: https://www.youtube.com/watch?v=48JlgiBpw_I
  - this explains things like "M-x", "C-c", "C-x" etc. which you can see when you use menu items like "file"
    - to illustrate, use your mouse to click on "File" in the top left corner
    - the first item is: "Visit New File... C-x C-f"
    - you can click on this item to open a file; but you can also use the key combination C-x C-f which means: press Control (Ctrl) and x together; release these keys; then press Ctrl and f together. This allows you to open a file. If you type the name of a file that does not exist yet, this new file will be created
    - you save a file with C-x C-s; hence you can quickly save a file by pressing these keys without having to reach for the mouse
    - the emacs configuration below helps as it uses the which-key package. After typing C-x, it shows you what other keys you can use.

There are other great introductions to emacs as well:
- https://www.youtube.com/playlist?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg
- https://www.youtube.com/playlist?list=PLwTHcico4iPMlBZPin6catRcUDzf7NNVs
- or google emacs tutorial or emacs for beginners
- finally, emacs is self documenting: all information can be found in emacs as well, just type C-h i
  - this gives information on emacs and all the packages you installed with emacs


Book/web introductions to Emacs:
- https://www2.lib.uchicago.edu/keith/emacs/


** basic configuration :noexport:

Make emacs look better. When you start emacs "out-of-the-box" it does not look very nice, nor is it very easy to use. The code block below helps to remedy this. It is based on this init-file:
- https://github.com/daviwil/emacs-from-scratch/blob/3075158cae210060888001c0d76a58a4178f6a00/init.el
which is discussed in this video:
- https://www.youtube.com/watch?v=74zOY-vgkyw&t=148s
It is highly recommended that you watch this video to get a sense on how the customization of emacs works.

You can use this code by placing your cursor in the code block below (it is written in emacs-lisp) and then press: C-c C-c


Before using the code, you need to install the font that you want to use.

I use the font Source Code Pro which can be downloaded here: https://fonts.google.com/specimen/Source+Code+Pro
- if you do not have this font installed, you will get an error
- if you do not want to use a different font, put ";" in front of that line in the code. Like "#" in python, ";" indicates in elisp that what follows is a comment

If you get an error running this code block saying that a package cannot be found, run =M-X package-refresh-contents=

At the end of the code block I activate evil mode. You probably do not want to do that at the start as it can be a bit confusing. If you want to know more about it, type: M-x evil-tutor-start to learn the basic of the evil key-bindings.



#+begin_src emacs-lisp :tangle ./init.el
		    (setq inhibit-startup-message t)
		    (scroll-bar-mode -1)        ; Disable visible scrollbar
		    (tool-bar-mode -1)          ; Disable the toolbar
		    (tooltip-mode -1)           ; Disable tooltips
		    (set-fringe-mode 10)        ; Give some breathing room
		    (menu-bar-mode +1)            ; Disable the menu bar: use -1
		    (setq visible-bell t)
		    ;(set-face-attribute 'default nil :font "Source Code Pro" :height 260)
		    (load-theme 'leuven)
		    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
		    (require 'package)
		    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
					     ("org" . "https://orgmode.org/elpa/")
					     ("elpa" . "https://elpa.gnu.org/packages/")))
		    (package-initialize)
		    (unless package-archive-contents
		       (package-refresh-contents))

		    ;; Initialize use-package on non-Linux platforms
		    (unless (package-installed-p 'use-package)
		       (package-install 'use-package))

		    (require 'use-package)
		    (setq use-package-always-ensure t)

		    (use-package command-log-mode)
		    (use-package ivy
		      :diminish
		      :bind (("C-s" . swiper)
			     :map ivy-minibuffer-map
			     ("TAB" . ivy-alt-done)	
			     ("C-l" . ivy-alt-done)
			     ("C-j" . ivy-next-line)
			     ("C-k" . ivy-previous-line)
			     :map ivy-switch-buffer-map
			     ("C-k" . ivy-previous-line)
			     ("C-l" . ivy-done)
			     ("C-d" . ivy-switch-buffer-kill)
			     :map ivy-reverse-i-search-map
			     ("C-k" . ivy-previous-line)
			     ("C-d" . ivy-reverse-i-search-kill))
		      :config
		      (ivy-mode 1))

		  (setq org-confirm-babel-evaluate nil)
	    (use-package prescient)
	    (use-package ivy-prescient)
	  (ivy-prescient-mode 1)
    (setq org-export-use-babel nil)
		  (use-package auctex
		    :defer t
		    :ensure t)
		  (use-package cdlatex
		    :ensure t)
		  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
		  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
		  (add-hook 'LaTeX-mode-hook 'cdlatex-mode)
		  (use-package magit)


      (use-package ivy-bibtex)
  (use-package org-ref
    :init
    (require 'bibtex)
    (setq bibtex-autokey-year-length 4
	  bibtex-autokey-name-year-separator "-"
	  bibtex-autokey-year-title-separator "-"
	  bibtex-autokey-titleword-separator "-"
	  bibtex-autokey-titlewords 2
	  bibtex-autokey-titlewords-stretch 1
	  bibtex-autokey-titleword-length 5)
    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
    (require 'org-ref-ivy)
    (require 'org-ref-arxiv)
    (require 'org-ref-scopus)
    (require 'org-ref-wos))


      (use-package org-ref)
	(require 'bibtex)
	(setq bibtex-autokey-year-length 4
	      bibtex-autokey-name-year-separator "-"
	      bibtex-autokey-year-title-separator "-"
	      bibtex-autokey-titleword-separator "-"
	      bibtex-autokey-titlewords 2
	      bibtex-autokey-titlewords-stretch 1
	      bibtex-autokey-titleword-length 5)
	(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
	(define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
	(define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)



		  (define-key org-mode-map (kbd "C-c )") 'org-ref-insert-ref-link)
		  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-cite-link)


	(require 'org-ref-ivy)
	(require 'org-ref-arxiv)
	(require 'org-ref-scopus)
	(require 'org-ref-wos)

	      (add-hook 'org-mode-hook #'turn-on-org-cdlatex)

		  (use-package which-key)
		  (which-key-mode)
		  (which-key-setup-side-window-bottom)

		  (use-package jupyter)


		;; This is needed as of Org 9.2
		(require 'org-tempo)

		(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
		(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
		(add-to-list 'org-structure-template-alist '("py" . "src python"))
		(add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python"))

		(org-babel-do-load-languages 'org-babel-load-languages
					     '((emacs-lisp . t)
					       (shell . t)
					       (python . t)
					       (jupyter . t)
					       ))

	  (setq org-export-with-broken-links t)
	(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

		;; Download Evil
		(unless (package-installed-p 'evil)
		(package-install 'evil))

		;; Enable Evil
		(require 'evil)
		(evil-mode 1) ;; use -1 to switch evil-mode off.
(use-package evil-tutor)

#+end_src

#+RESULTS:


** next steps

You can extend the configuration of emacs by yourself, e.g. by watching tutorials like: https://www.youtube.com/playlist?list=PLEoMzSkcN8oNmd98m_6FoaJseUsa6QGm2

Or you can use pre-configured emacs distributions like scimax and doom emacs.

   
*** scimax

Scimax is developed for engineers, but works perfectly well for economists. More details can be found here:
- https://github.com/jkitchin/scimax
- youtube playlist with scimax features: https://www.youtube.com/playlist?list=PL0sMmOaE_gs3E0OjExoI7vlCAVygj6S4I

*** Doom

Emacs has an absurd number of features and how do you choose the right ones if you do not know about them? Doom emacs has very reasonable default settings:
- https://github.com/hlissner/doom-emacs
- Doom emacs for noobs: https://www.youtube.com/watch?v=iab2z21cRqA
- Doom emacs getting started: https://www.youtube.com/watch?v=dr_iBj91eeI
- youtube playlist: https://www.youtube.com/playlist?list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj


** code :noexport:

Now we can make code blocks, e.g. using python. This code block makes use of the data in Table ref:table1.

#+begin_src python :var data=table1 :results output

  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt

  X = np.array(data)
  df = pd.DataFrame(X[1:,:],columns=X[0,:])
  df = df.astype({'gdp':float,'unemployment':float})

  plt.plot(df.gdp,df.unemployment,'o')
  plt.savefig('fig.png')          


#+end_src

#+RESULTS:

[[./fig.png]]



#+begin_src python :results output
  import numpy as np
  print(np.arange(5))
#+end_src

#+RESULTS:
: [0 1 2 3 4]

For an overview of the programming languages you can use in org-mode, see: https://orgmode.org/worg/org-contrib/babel/languages/index.html
